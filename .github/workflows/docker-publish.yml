name: Docker

on:
  push:
    branches:
      - '*'
    tags:
      - v*
  pull_request:

env:
  IMAGE_NAME: mic_web

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x]
    steps:
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}

      - name: Get Yarn cache directory
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - name: Use Yarn cache
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ matrix.node-version }}-${{ hashFiles('**/yarn.lock') }}

      - name: Install dependencies
        run: yarn install --prefer-offline --frozen-lockfile

      - name: Build (webpack) 
        run: yarn build
        
      - uses: actions/upload-artifact@v2
        with:
          name: nextjs-build
          path: ./build/
          retention-days: 1

  push:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v2
        with:
          name: nextjs-build
          path: build/

      - name: Build image
        run: docker build . --file .Dockerfile-workflow --tag $IMAGE_NAME
      
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Push image
        run: |
          IMAGE_ID=${{ github.repository }}
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')
          [ "$VERSION" == "master" ] && VERSION=latest
          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION

  # update:
  #   needs: push
  #   runs-on: ubuntu-latest
  #   steps:
  #     - uses: actions/checkout@v2
  #     - name: Set webhook deployment master-isi
  #       if: endsWith(github.ref, '/master')
  #       run: |
  #         echo "WEBHOOK_SERVER=webhook.mint.isi.edu" >> $GITHUB_ENV
  #     - name: Set webhook deployment
  #       if: endsWith(github.ref, '/dev')
  #       run: |
  #         echo "WEBHOOK_SERVER=webhook.dev.mint.isi.edu" >> $GITHUB_ENV
  #     - name: Update the image
  #       run: |  
  #         [[ ! -z "${WEBHOOK_SERVER}" ]]  && curl -H "webhook:${KEY}" https://${WEBHOOK_SERVER}/hooks/ui|| echo "skipping ci"
  #       env:
  #         KEY: ${{ secrets.WEBHOOK }}


